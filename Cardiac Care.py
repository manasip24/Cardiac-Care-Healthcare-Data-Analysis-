# -*- coding: utf-8 -*-
"""Heart.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vnL39qyDwlKC-xGpHw-bdg3FSW4OVER4
"""

# Importing necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.decomposition import PCA

# Loading the dataset
data = pd.read_csv('/content/heart.csv')

# Data Preprocessing
# Handling missing values, encoding categorical variables, etc.
data = data.dropna()

# Exploratory Data Analysis (EDA)
# Distribution of Age
plt.figure(figsize=(10, 6))
sns.histplot(data['age'], bins=30, kde=True, color='skyblue')
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

# Gender distribution
plt.figure(figsize=(6, 6))
data['sex'].value_counts().plot(kind='pie', autopct='%1.1f%%', startangle=140, colors=['lightpink', 'lightblue'])
plt.ylabel('')
plt.title('Gender Distribution')
plt.show()

# Correlation Heatmap
plt.figure(figsize=(12, 10))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

# Pairplot for select features
sns.pairplot(data[['age', 'trestbps', 'chol', 'thalach', 'oldpeak']], diag_kind='kde')
plt.suptitle('Pairplot of Select Features')
plt.show()

# Print the column names of the dataset
print(data.columns)

# Data Preparation for Modeling
X = data.drop('target', axis=1)  # Assuming 'target' is the column to predict
y = data['target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature Scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Model Building - Random Forest Classifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Model Evaluation
predictions = model.predict(X_test)
print(f"Model Accuracy: {accuracy_score(y_test, predictions)}")
print(classification_report(y_test, predictions))

# Feature Importance Visualization
feature_importance = model.feature_importances_
sorted_idx = np.argsort(feature_importance)
plt.barh(range(len(sorted_idx)), feature_importance[sorted_idx], align='center')
plt.yticks(range(len(sorted_idx)), [X.columns[i] for i in sorted_idx])
plt.title('Feature Importance in Predicting Heart Disease')
plt.show()

# PCA Visualization
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)
sns.scatterplot(x=X_pca[:, 0], y=X_pca[:, 1], hue=y, palette='bright')
plt.title('PCA of Heart Disease Data')
plt.xlabel('First Principal Component')
plt.ylabel('Second Principal Component')
plt.show()